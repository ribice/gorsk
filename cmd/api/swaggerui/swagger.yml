openapi: 3.0.0
info:
  description: API Docs for GORSK v1
  title: GORSK - Go(lang) restful starter kit
  contact:
    name: Emir Ribic
    url: 'https://ribice.ba'
    email: ribice@gmail.com
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
  version: 1.0.0
paths:
  /login:
    post:
      tags:
        - auth
      summary: Logs in user by username and password.
      operationId: login
      responses:
        '200':
          $ref: '#/components/responses/loginResp'
        '400':
          $ref: '#/components/responses/errMsg'
        '401':
          $ref: '#/components/responses/errMsg'
        '403':
          $ref: '#/components/responses/err'
        '404':
          $ref: '#/components/responses/errMsg'
        '500':
          $ref: '#/components/responses/err'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
  /me:
    get:
      tags:
        - auth
      summary: Gets user's info from session.
      operationId: meReq
      responses:
        '200':
          $ref: '#/components/responses/userResp'
        '500':
          $ref: '#/components/responses/err'
  '/refresh/{token}':
    get:
      description: >-
        Refreshes jwt token by checking at database whether refresh token
        exists.
      tags:
        - auth
      summary: Refreshes jwt token.
      operationId: refresh
      parameters:
        - description: refresh token
          name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/refreshResp'
        '400':
          $ref: '#/components/responses/errMsg'
        '401':
          $ref: '#/components/responses/err'
        '500':
          $ref: '#/components/responses/err'
  /v1/users:
    get:
      description: >-
        Returns list of users. Depending on the user role requesting it, it may
        return all users for SuperAdmin/Admin users, all company/location users
        for Company/Location admins, and an error for non-admin users.
      tags:
        - users
      summary: Returns list of users.
      operationId: listUsers
      parameters:
        - description: number of results
          name: limit
          in: query
          schema:
            type: integer
        - description: page number
          name: page
          in: query
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/userListResp'
        '400':
          $ref: '#/components/responses/errMsg'
        '401':
          $ref: '#/components/responses/err'
        '403':
          $ref: '#/components/responses/err'
        '500':
          $ref: '#/components/responses/err'
    post:
      tags:
        - users
      summary: Creates new user account.
      operationId: accCreate
      responses:
        '200':
          $ref: '#/components/responses/userResp'
        '400':
          $ref: '#/components/responses/errMsg'
        '401':
          $ref: '#/components/responses/err'
        '403':
          $ref: '#/components/responses/errMsg'
        '500':
          $ref: '#/components/responses/err'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
  '/v1/users/{id}':
    get:
      description: Returns a single user by its ID.
      tags:
        - users
      summary: Returns a single user.
      operationId: getUser
      parameters:
        - description: id of user
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/userResp'
        '400':
          $ref: '#/components/responses/err'
        '401':
          $ref: '#/components/responses/err'
        '403':
          $ref: '#/components/responses/err'
        '404':
          $ref: '#/components/responses/err'
        '500':
          $ref: '#/components/responses/err'
    delete:
      description: Deletes a user with requested ID.
      tags:
        - users
      summary: Deletes a user
      operationId: userDelete
      parameters:
        - description: id of user
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '400':
          $ref: '#/components/responses/err'
        '401':
          $ref: '#/components/responses/err'
        '403':
          $ref: '#/components/responses/err'
        '500':
          $ref: '#/components/responses/err'
    patch:
      description: >-
        Updates user's contact information -> first name, last name, mobile,
        phone, address.
      tags:
        - users
      summary: Updates user's contact information
      operationId: userUpdate
      parameters:
        - description: id of user
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/userResp'
        '400':
          $ref: '#/components/responses/errMsg'
        '401':
          $ref: '#/components/responses/err'
        '403':
          $ref: '#/components/responses/err'
        '500':
          $ref: '#/components/responses/err'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdate'
        description: Request body
        required: true
  '/v1/users/{id}/password':
    patch:
      description: >-
        If user's old passowrd is correct, it will be replaced with new
        password.
      tags:
        - users
      summary: Changes user's password.
      operationId: pwChange
      parameters:
        - description: id of user
          name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '400':
          $ref: '#/components/responses/errMsg'
        '401':
          $ref: '#/components/responses/err'
        '403':
          $ref: '#/components/responses/err'
        '500':
          $ref: '#/components/responses/err'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pwChange'
        description: Request body
        required: true
security:
  - bearer: []
servers:
  - url: 'http://localhost:8080/'
components:
  responses:
    err:
      description: Error response
    errMsg:
      description: Error response with message
      headers:
        message:
          schema:
            type: string
    loginResp:
      description: Login response
      content:
        application/json:
          schema:
            type: object
            properties:
              expires:
                type: string
                x-go-name: Expires
              refresh_token:
                type: string
                x-go-name: RefreshToken
              token:
                type: string
                x-go-name: Token
    ok:
      description: Success response
    refreshResp:
      description: Token refresh response
      content:
        application/json:
          schema:
            type: object
            properties:
              expires:
                type: string
                x-go-name: Expires
              token:
                type: string
                x-go-name: Token
    userListResp:
      description: Users model response
      content:
        application/json:
          schema:
            type: object
            properties:
              page:
                type: integer
                format: int64
                x-go-name: Page
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-go-name: Users
    userResp:
      description: User model response
      content:
        application/json:
          schema:
            type: object
            properties:
              active:
                type: boolean
                x-go-name: Active
              address:
                type: string
                x-go-name: Address
              company_id:
                type: integer
                format: int64
                x-go-name: CompanyID
              created_at:
                type: string
                format: date-time
                x-go-name: CreatedAt
              deleted_at:
                type: string
                format: date-time
                x-go-name: DeletedAt
              email:
                type: string
                x-go-name: Email
              first_name:
                type: string
                x-go-name: FirstName
              id:
                type: integer
                format: int64
                x-go-name: ID
              last_login:
                type: string
                format: date-time
                x-go-name: LastLogin
              last_name:
                type: string
                x-go-name: LastName
              location_id:
                type: integer
                format: int64
                x-go-name: LocationID
              mobile:
                type: string
                x-go-name: Mobile
              phone:
                type: string
                x-go-name: Phone
              role:
                $ref: '#/components/schemas/Role'
              updated_at:
                type: string
                format: date-time
                x-go-name: UpdatedAt
              username:
                type: string
                x-go-name: Username
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    AccessRole:
      description: AccessRole represents access role type
      type: integer
      format: int8
      x-go-package: github.com/ribice/gorsk/internal
    Credentials:
      description: Credentials contains login request
      type: object
      properties:
        password:
          type: string
          x-go-name: Password
        username:
          type: string
          x-go-name: Username
      x-go-package: github.com/ribice/gorsk/cmd/api/request
    Register:
      description: Register contains registration request
      type: object
      properties:
        company_id:
          type: integer
          format: int64
          x-go-name: CompanyID
        email:
          type: string
          x-go-name: Email
        first_name:
          type: string
          x-go-name: FirstName
        last_name:
          type: string
          x-go-name: LastName
        location_id:
          type: integer
          format: int64
          x-go-name: LocationID
        password:
          type: string
          x-go-name: Password
        password_confirm:
          type: string
          x-go-name: PasswordConfirm
        role_id:
          type: integer
          format: int64
          x-go-name: RoleID
        username:
          type: string
          x-go-name: Username
      x-go-package: github.com/ribice/gorsk/cmd/api/request
    Role:
      description: Role model
      type: object
      properties:
        access_level:
          $ref: '#/components/schemas/AccessRole'
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
      x-go-package: github.com/ribice/gorsk/internal
    User:
      description: User represents user domain model
      type: object
      properties:
        active:
          type: boolean
          x-go-name: Active
        address:
          type: string
          x-go-name: Address
        company_id:
          type: integer
          format: int64
          x-go-name: CompanyID
        created_at:
          type: string
          format: date-time
          x-go-name: CreatedAt
        deleted_at:
          type: string
          format: date-time
          x-go-name: DeletedAt
        email:
          type: string
          x-go-name: Email
        first_name:
          type: string
          x-go-name: FirstName
        id:
          type: integer
          format: int64
          x-go-name: ID
        last_login:
          type: string
          format: date-time
          x-go-name: LastLogin
        last_name:
          type: string
          x-go-name: LastName
        location_id:
          type: integer
          format: int64
          x-go-name: LocationID
        mobile:
          type: string
          x-go-name: Mobile
        phone:
          type: string
          x-go-name: Phone
        role:
          $ref: '#/components/schemas/Role'
        updated_at:
          type: string
          format: date-time
          x-go-name: UpdatedAt
        username:
          type: string
          x-go-name: Username
      x-go-package: github.com/ribice/gorsk/internal
    pwChange:
      description: Password change request
      type: object
      properties:
        new_password:
          type: string
          x-go-name: NewPassword
        new_password_confirm:
          type: string
          x-go-name: NewPasswordConfirm
        old_password:
          type: string
          x-go-name: OldPassword
      x-go-name: swaggPwChange
      x-go-package: github.com/ribice/gorsk/cmd/api/swagger
    swaggAccCreateReq:
      description: Account create request
      type: object
      properties:
        Body:
          $ref: '#/components/schemas/Register'
      x-go-package: github.com/ribice/gorsk/cmd/api/swagger
    swaggUserListResponse:
      description: Users model response
      type: object
      properties:
        Body:
          description: 'in:body'
          type: object
          properties:
            page:
              type: integer
              format: int64
              x-go-name: Page
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
              x-go-name: Users
      x-go-package: github.com/ribice/gorsk/cmd/api/swagger
    swaggUserResponse:
      description: User model response
      type: object
      properties:
        Body:
          description: 'in:body'
          type: object
          properties:
            active:
              type: boolean
              x-go-name: Active
            address:
              type: string
              x-go-name: Address
            company_id:
              type: integer
              format: int64
              x-go-name: CompanyID
            created_at:
              type: string
              format: date-time
              x-go-name: CreatedAt
            deleted_at:
              type: string
              format: date-time
              x-go-name: DeletedAt
            email:
              type: string
              x-go-name: Email
            first_name:
              type: string
              x-go-name: FirstName
            id:
              type: integer
              format: int64
              x-go-name: ID
            last_login:
              type: string
              format: date-time
              x-go-name: LastLogin
            last_name:
              type: string
              x-go-name: LastName
            location_id:
              type: integer
              format: int64
              x-go-name: LocationID
            mobile:
              type: string
              x-go-name: Mobile
            phone:
              type: string
              x-go-name: Phone
            role:
              $ref: '#/components/schemas/Role'
            updated_at:
              type: string
              format: date-time
              x-go-name: UpdatedAt
            username:
              type: string
              x-go-name: Username
      x-go-package: github.com/ribice/gorsk/cmd/api/swagger
    userUpdate:
      description: User update request
      type: object
      properties:
        address:
          type: string
          x-go-name: Address
        first_name:
          type: string
          x-go-name: FirstName
        last_name:
          type: string
          x-go-name: LastName
        mobile:
          type: string
          x-go-name: Mobile
        phone:
          type: string
          x-go-name: Phone
      x-go-name: swaggUserUpdateReq
      x-go-package: github.com/ribice/gorsk/cmd/api/swagger
